module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateCalls {
  count: Int!
}

type AggregateConfig {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Calls {
  id: ID!
  IP: String!
  Endpoint: String!
  TimeStamp: Int!
}

type CallsConnection {
  pageInfo: PageInfo!
  edges: [CallsEdge]!
  aggregate: AggregateCalls!
}

input CallsCreateInput {
  id: ID
  IP: String!
  Endpoint: String!
  TimeStamp: Int!
}

type CallsEdge {
  node: Calls!
  cursor: String!
}

enum CallsOrderByInput {
  id_ASC
  id_DESC
  IP_ASC
  IP_DESC
  Endpoint_ASC
  Endpoint_DESC
  TimeStamp_ASC
  TimeStamp_DESC
}

type CallsPreviousValues {
  id: ID!
  IP: String!
  Endpoint: String!
  TimeStamp: Int!
}

type CallsSubscriptionPayload {
  mutation: MutationType!
  node: Calls
  updatedFields: [String!]
  previousValues: CallsPreviousValues
}

input CallsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CallsWhereInput
  AND: [CallsSubscriptionWhereInput!]
  OR: [CallsSubscriptionWhereInput!]
  NOT: [CallsSubscriptionWhereInput!]
}

input CallsUpdateInput {
  IP: String
  Endpoint: String
  TimeStamp: Int
}

input CallsUpdateManyMutationInput {
  IP: String
  Endpoint: String
  TimeStamp: Int
}

input CallsWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  IP: String
  IP_not: String
  IP_in: [String!]
  IP_not_in: [String!]
  IP_lt: String
  IP_lte: String
  IP_gt: String
  IP_gte: String
  IP_contains: String
  IP_not_contains: String
  IP_starts_with: String
  IP_not_starts_with: String
  IP_ends_with: String
  IP_not_ends_with: String
  Endpoint: String
  Endpoint_not: String
  Endpoint_in: [String!]
  Endpoint_not_in: [String!]
  Endpoint_lt: String
  Endpoint_lte: String
  Endpoint_gt: String
  Endpoint_gte: String
  Endpoint_contains: String
  Endpoint_not_contains: String
  Endpoint_starts_with: String
  Endpoint_not_starts_with: String
  Endpoint_ends_with: String
  Endpoint_not_ends_with: String
  TimeStamp: Int
  TimeStamp_not: Int
  TimeStamp_in: [Int!]
  TimeStamp_not_in: [Int!]
  TimeStamp_lt: Int
  TimeStamp_lte: Int
  TimeStamp_gt: Int
  TimeStamp_gte: Int
  AND: [CallsWhereInput!]
  OR: [CallsWhereInput!]
  NOT: [CallsWhereInput!]
}

input CallsWhereUniqueInput {
  id: ID
}

type Config {
  id: ID!
  IP: String!
  AllowedCallPerMinute: Int!
}

type ConfigConnection {
  pageInfo: PageInfo!
  edges: [ConfigEdge]!
  aggregate: AggregateConfig!
}

input ConfigCreateInput {
  id: ID
  IP: String!
  AllowedCallPerMinute: Int!
}

type ConfigEdge {
  node: Config!
  cursor: String!
}

enum ConfigOrderByInput {
  id_ASC
  id_DESC
  IP_ASC
  IP_DESC
  AllowedCallPerMinute_ASC
  AllowedCallPerMinute_DESC
}

type ConfigPreviousValues {
  id: ID!
  IP: String!
  AllowedCallPerMinute: Int!
}

type ConfigSubscriptionPayload {
  mutation: MutationType!
  node: Config
  updatedFields: [String!]
  previousValues: ConfigPreviousValues
}

input ConfigSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ConfigWhereInput
  AND: [ConfigSubscriptionWhereInput!]
  OR: [ConfigSubscriptionWhereInput!]
  NOT: [ConfigSubscriptionWhereInput!]
}

input ConfigUpdateInput {
  IP: String
  AllowedCallPerMinute: Int
}

input ConfigUpdateManyMutationInput {
  IP: String
  AllowedCallPerMinute: Int
}

input ConfigWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  IP: String
  IP_not: String
  IP_in: [String!]
  IP_not_in: [String!]
  IP_lt: String
  IP_lte: String
  IP_gt: String
  IP_gte: String
  IP_contains: String
  IP_not_contains: String
  IP_starts_with: String
  IP_not_starts_with: String
  IP_ends_with: String
  IP_not_ends_with: String
  AllowedCallPerMinute: Int
  AllowedCallPerMinute_not: Int
  AllowedCallPerMinute_in: [Int!]
  AllowedCallPerMinute_not_in: [Int!]
  AllowedCallPerMinute_lt: Int
  AllowedCallPerMinute_lte: Int
  AllowedCallPerMinute_gt: Int
  AllowedCallPerMinute_gte: Int
  AND: [ConfigWhereInput!]
  OR: [ConfigWhereInput!]
  NOT: [ConfigWhereInput!]
}

input ConfigWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createCalls(data: CallsCreateInput!): Calls!
  updateCalls(data: CallsUpdateInput!, where: CallsWhereUniqueInput!): Calls
  updateManyCallses(data: CallsUpdateManyMutationInput!, where: CallsWhereInput): BatchPayload!
  upsertCalls(where: CallsWhereUniqueInput!, create: CallsCreateInput!, update: CallsUpdateInput!): Calls!
  deleteCalls(where: CallsWhereUniqueInput!): Calls
  deleteManyCallses(where: CallsWhereInput): BatchPayload!
  createConfig(data: ConfigCreateInput!): Config!
  updateConfig(data: ConfigUpdateInput!, where: ConfigWhereUniqueInput!): Config
  updateManyConfigs(data: ConfigUpdateManyMutationInput!, where: ConfigWhereInput): BatchPayload!
  upsertConfig(where: ConfigWhereUniqueInput!, create: ConfigCreateInput!, update: ConfigUpdateInput!): Config!
  deleteConfig(where: ConfigWhereUniqueInput!): Config
  deleteManyConfigs(where: ConfigWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  title: String!
  published: Boolean!
  author: User!
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  title: String!
  published: Boolean!
  author: UserCreateOneWithoutPostsInput!
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutAuthorInput {
  id: ID
  title: String!
  published: Boolean!
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  published_ASC
  published_DESC
}

type PostPreviousValues {
  id: ID!
  title: String!
  published: Boolean!
}

input PostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  published: Boolean
  published_not: Boolean
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  title: String
  published: Boolean
  author: UserUpdateOneRequiredWithoutPostsInput
}

input PostUpdateManyDataInput {
  title: String
  published: Boolean
}

input PostUpdateManyMutationInput {
  title: String
  published: Boolean
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateWithoutAuthorDataInput {
  title: String
  published: Boolean
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  published: Boolean
  published_not: Boolean
  author: UserWhereInput
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  calls(where: CallsWhereUniqueInput!): Calls
  callses(where: CallsWhereInput, orderBy: CallsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Calls]!
  callsesConnection(where: CallsWhereInput, orderBy: CallsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CallsConnection!
  config(where: ConfigWhereUniqueInput!): Config
  configs(where: ConfigWhereInput, orderBy: ConfigOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Config]!
  configsConnection(where: ConfigWhereInput, orderBy: ConfigOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConfigConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  calls(where: CallsSubscriptionWhereInput): CallsSubscriptionPayload
  config(where: ConfigSubscriptionWhereInput): ConfigSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  age: Int
  email: String!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  follows(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  followers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  age: Int
  email: String!
  posts: PostCreateManyWithoutAuthorInput
  follows: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowsInput
}

input UserCreateManyWithoutFollowersInput {
  create: [UserCreateWithoutFollowersInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutFollowsInput {
  create: [UserCreateWithoutFollowsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutFollowersInput {
  id: ID
  name: String!
  age: Int
  email: String!
  posts: PostCreateManyWithoutAuthorInput
  follows: UserCreateManyWithoutFollowersInput
}

input UserCreateWithoutFollowsInput {
  id: ID
  name: String!
  age: Int
  email: String!
  posts: PostCreateManyWithoutAuthorInput
  followers: UserCreateManyWithoutFollowsInput
}

input UserCreateWithoutPostsInput {
  id: ID
  name: String!
  age: Int
  email: String!
  follows: UserCreateManyWithoutFollowersInput
  followers: UserCreateManyWithoutFollowsInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  age_ASC
  age_DESC
  email_ASC
  email_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  age: Int
  email: String!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  age: Int
  age_not: Int
  age_in: [Int!]
  age_not_in: [Int!]
  age_lt: Int
  age_lte: Int
  age_gt: Int
  age_gte: Int
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  age: Int
  email: String
  posts: PostUpdateManyWithoutAuthorInput
  follows: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowsInput
}

input UserUpdateManyDataInput {
  name: String
  age: Int
  email: String
}

input UserUpdateManyMutationInput {
  name: String
  age: Int
  email: String
}

input UserUpdateManyWithoutFollowersInput {
  create: [UserCreateWithoutFollowersInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowersInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowersInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutFollowsInput {
  create: [UserCreateWithoutFollowsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutFollowersDataInput {
  name: String
  age: Int
  email: String
  posts: PostUpdateManyWithoutAuthorInput
  follows: UserUpdateManyWithoutFollowersInput
}

input UserUpdateWithoutFollowsDataInput {
  name: String
  age: Int
  email: String
  posts: PostUpdateManyWithoutAuthorInput
  followers: UserUpdateManyWithoutFollowsInput
}

input UserUpdateWithoutPostsDataInput {
  name: String
  age: Int
  email: String
  follows: UserUpdateManyWithoutFollowersInput
  followers: UserUpdateManyWithoutFollowsInput
}

input UserUpdateWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFollowersDataInput!
}

input UserUpdateWithWhereUniqueWithoutFollowsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFollowsDataInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserUpsertWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFollowersDataInput!
  create: UserCreateWithoutFollowersInput!
}

input UserUpsertWithWhereUniqueWithoutFollowsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFollowsDataInput!
  create: UserCreateWithoutFollowsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  age: Int
  age_not: Int
  age_in: [Int!]
  age_not_in: [Int!]
  age_lt: Int
  age_lte: Int
  age_gt: Int
  age_gte: Int
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  follows_every: UserWhereInput
  follows_some: UserWhereInput
  follows_none: UserWhereInput
  followers_every: UserWhereInput
  followers_some: UserWhereInput
  followers_none: UserWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    