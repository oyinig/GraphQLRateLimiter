// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  calls: (where?: CallsWhereInput) => Promise<boolean>;
  config: (where?: ConfigWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  calls: (where: CallsWhereUniqueInput) => CallsNullablePromise;
  callses: (args?: {
    where?: CallsWhereInput;
    orderBy?: CallsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Calls>;
  callsesConnection: (args?: {
    where?: CallsWhereInput;
    orderBy?: CallsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CallsConnectionPromise;
  config: (where: ConfigWhereUniqueInput) => ConfigNullablePromise;
  configs: (args?: {
    where?: ConfigWhereInput;
    orderBy?: ConfigOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Config>;
  configsConnection: (args?: {
    where?: ConfigWhereInput;
    orderBy?: ConfigOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ConfigConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostNullablePromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCalls: (data: CallsCreateInput) => CallsPromise;
  updateCalls: (args: {
    data: CallsUpdateInput;
    where: CallsWhereUniqueInput;
  }) => CallsPromise;
  updateManyCallses: (args: {
    data: CallsUpdateManyMutationInput;
    where?: CallsWhereInput;
  }) => BatchPayloadPromise;
  upsertCalls: (args: {
    where: CallsWhereUniqueInput;
    create: CallsCreateInput;
    update: CallsUpdateInput;
  }) => CallsPromise;
  deleteCalls: (where: CallsWhereUniqueInput) => CallsPromise;
  deleteManyCallses: (where?: CallsWhereInput) => BatchPayloadPromise;
  createConfig: (data: ConfigCreateInput) => ConfigPromise;
  updateConfig: (args: {
    data: ConfigUpdateInput;
    where: ConfigWhereUniqueInput;
  }) => ConfigPromise;
  updateManyConfigs: (args: {
    data: ConfigUpdateManyMutationInput;
    where?: ConfigWhereInput;
  }) => BatchPayloadPromise;
  upsertConfig: (args: {
    where: ConfigWhereUniqueInput;
    create: ConfigCreateInput;
    update: ConfigUpdateInput;
  }) => ConfigPromise;
  deleteConfig: (where: ConfigWhereUniqueInput) => ConfigPromise;
  deleteManyConfigs: (where?: ConfigWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  calls: (
    where?: CallsSubscriptionWhereInput
  ) => CallsSubscriptionPayloadSubscription;
  config: (
    where?: ConfigSubscriptionWhereInput
  ) => ConfigSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CallsOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "IP_ASC"
  | "IP_DESC"
  | "Endpoint_ASC"
  | "Endpoint_DESC"
  | "TimeStamp_ASC"
  | "TimeStamp_DESC";

export type ConfigOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "IP_ASC"
  | "IP_DESC"
  | "AllowedCallPerMinute_ASC"
  | "AllowedCallPerMinute_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "published_ASC"
  | "published_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "age_ASC"
  | "age_DESC"
  | "email_ASC"
  | "email_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserCreateManyWithoutFollowersInput {
  create?: Maybe<
    UserCreateWithoutFollowersInput[] | UserCreateWithoutFollowersInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export type CallsWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CallsCreateInput {
  id?: Maybe<ID_Input>;
  IP: String;
  Endpoint: String;
  TimeStamp: Int;
}

export interface PostUpdateWithoutAuthorDataInput {
  title?: Maybe<String>;
  published?: Maybe<Boolean>;
}

export interface CallsUpdateInput {
  IP?: Maybe<String>;
  Endpoint?: Maybe<String>;
  TimeStamp?: Maybe<Int>;
}

export interface PostCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  title: String;
  published: Boolean;
}

export interface CallsUpdateManyMutationInput {
  IP?: Maybe<String>;
  Endpoint?: Maybe<String>;
  TimeStamp?: Maybe<Int>;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PostWhereInput>;
  AND?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  OR?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  NOT?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
}

export interface PostUpdateManyDataInput {
  title?: Maybe<String>;
  published?: Maybe<Boolean>;
}

export type ConfigWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface ConfigWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  IP?: Maybe<String>;
  IP_not?: Maybe<String>;
  IP_in?: Maybe<String[] | String>;
  IP_not_in?: Maybe<String[] | String>;
  IP_lt?: Maybe<String>;
  IP_lte?: Maybe<String>;
  IP_gt?: Maybe<String>;
  IP_gte?: Maybe<String>;
  IP_contains?: Maybe<String>;
  IP_not_contains?: Maybe<String>;
  IP_starts_with?: Maybe<String>;
  IP_not_starts_with?: Maybe<String>;
  IP_ends_with?: Maybe<String>;
  IP_not_ends_with?: Maybe<String>;
  AllowedCallPerMinute?: Maybe<Int>;
  AllowedCallPerMinute_not?: Maybe<Int>;
  AllowedCallPerMinute_in?: Maybe<Int[] | Int>;
  AllowedCallPerMinute_not_in?: Maybe<Int[] | Int>;
  AllowedCallPerMinute_lt?: Maybe<Int>;
  AllowedCallPerMinute_lte?: Maybe<Int>;
  AllowedCallPerMinute_gt?: Maybe<Int>;
  AllowedCallPerMinute_gte?: Maybe<Int>;
  AND?: Maybe<ConfigWhereInput[] | ConfigWhereInput>;
  OR?: Maybe<ConfigWhereInput[] | ConfigWhereInput>;
  NOT?: Maybe<ConfigWhereInput[] | ConfigWhereInput>;
}

export interface ConfigCreateInput {
  id?: Maybe<ID_Input>;
  IP: String;
  AllowedCallPerMinute: Int;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  age?: Maybe<Int>;
  email?: Maybe<String>;
}

export interface ConfigUpdateInput {
  IP?: Maybe<String>;
  AllowedCallPerMinute?: Maybe<Int>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  age?: Maybe<Int>;
  email: String;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  follows?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowsInput>;
}

export interface ConfigUpdateManyMutationInput {
  IP?: Maybe<String>;
  AllowedCallPerMinute?: Maybe<Int>;
}

export interface PostUpdateManyMutationInput {
  title?: Maybe<String>;
  published?: Maybe<Boolean>;
}

export interface PostCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  published: Boolean;
  author: UserCreateOneWithoutPostsInput;
}

export interface PostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  author?: Maybe<UserWhereInput>;
  AND?: Maybe<PostWhereInput[] | PostWhereInput>;
  OR?: Maybe<PostWhereInput[] | PostWhereInput>;
  NOT?: Maybe<PostWhereInput[] | PostWhereInput>;
}

export interface UserCreateOneWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpsertWithWhereUniqueWithoutFollowsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFollowsDataInput;
  create: UserCreateWithoutFollowsInput;
}

export interface UserCreateWithoutPostsInput {
  id?: Maybe<ID_Input>;
  name: String;
  age?: Maybe<Int>;
  email: String;
  follows?: Maybe<UserCreateManyWithoutFollowersInput>;
  followers?: Maybe<UserCreateManyWithoutFollowsInput>;
}

export interface UserUpdateWithWhereUniqueWithoutFollowsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFollowsDataInput;
}

export interface PostScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  AND?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  OR?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  NOT?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
}

export interface UserUpdateManyDataInput {
  name?: Maybe<String>;
  age?: Maybe<Int>;
  email?: Maybe<String>;
}

export interface UserCreateWithoutFollowersInput {
  id?: Maybe<ID_Input>;
  name: String;
  age?: Maybe<Int>;
  email: String;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  follows?: Maybe<UserCreateManyWithoutFollowersInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface PostCreateManyWithoutAuthorInput {
  create?: Maybe<PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface UserUpsertWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFollowersDataInput;
  create: UserCreateWithoutFollowersInput;
}

export interface PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutAuthorDataInput;
  create: PostCreateWithoutAuthorInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface UserCreateManyWithoutFollowsInput {
  create?: Maybe<
    UserCreateWithoutFollowsInput[] | UserCreateWithoutFollowsInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface CallsSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CallsWhereInput>;
  AND?: Maybe<CallsSubscriptionWhereInput[] | CallsSubscriptionWhereInput>;
  OR?: Maybe<CallsSubscriptionWhereInput[] | CallsSubscriptionWhereInput>;
  NOT?: Maybe<CallsSubscriptionWhereInput[] | CallsSubscriptionWhereInput>;
}

export interface UserCreateWithoutFollowsInput {
  id?: Maybe<ID_Input>;
  name: String;
  age?: Maybe<Int>;
  email: String;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  followers?: Maybe<UserCreateManyWithoutFollowsInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  age?: Maybe<Int>;
  email?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  follows?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowsInput>;
}

export interface PostUpdateInput {
  title?: Maybe<String>;
  published?: Maybe<Boolean>;
  author?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  update?: Maybe<UserUpdateWithoutPostsDataInput>;
  upsert?: Maybe<UserUpsertWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutFollowsDataInput {
  name?: Maybe<String>;
  age?: Maybe<Int>;
  email?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowsInput>;
}

export interface UserUpdateWithoutPostsDataInput {
  name?: Maybe<String>;
  age?: Maybe<Int>;
  email?: Maybe<String>;
  follows?: Maybe<UserUpdateManyWithoutFollowersInput>;
  followers?: Maybe<UserUpdateManyWithoutFollowsInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface UserUpdateManyWithoutFollowersInput {
  create?: Maybe<
    UserCreateWithoutFollowersInput[] | UserCreateWithoutFollowersInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutFollowersInput[]
    | UserUpdateWithWhereUniqueWithoutFollowersInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutFollowersInput[]
    | UserUpsertWithWhereUniqueWithoutFollowersInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface CallsWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  IP?: Maybe<String>;
  IP_not?: Maybe<String>;
  IP_in?: Maybe<String[] | String>;
  IP_not_in?: Maybe<String[] | String>;
  IP_lt?: Maybe<String>;
  IP_lte?: Maybe<String>;
  IP_gt?: Maybe<String>;
  IP_gte?: Maybe<String>;
  IP_contains?: Maybe<String>;
  IP_not_contains?: Maybe<String>;
  IP_starts_with?: Maybe<String>;
  IP_not_starts_with?: Maybe<String>;
  IP_ends_with?: Maybe<String>;
  IP_not_ends_with?: Maybe<String>;
  Endpoint?: Maybe<String>;
  Endpoint_not?: Maybe<String>;
  Endpoint_in?: Maybe<String[] | String>;
  Endpoint_not_in?: Maybe<String[] | String>;
  Endpoint_lt?: Maybe<String>;
  Endpoint_lte?: Maybe<String>;
  Endpoint_gt?: Maybe<String>;
  Endpoint_gte?: Maybe<String>;
  Endpoint_contains?: Maybe<String>;
  Endpoint_not_contains?: Maybe<String>;
  Endpoint_starts_with?: Maybe<String>;
  Endpoint_not_starts_with?: Maybe<String>;
  Endpoint_ends_with?: Maybe<String>;
  Endpoint_not_ends_with?: Maybe<String>;
  TimeStamp?: Maybe<Int>;
  TimeStamp_not?: Maybe<Int>;
  TimeStamp_in?: Maybe<Int[] | Int>;
  TimeStamp_not_in?: Maybe<Int[] | Int>;
  TimeStamp_lt?: Maybe<Int>;
  TimeStamp_lte?: Maybe<Int>;
  TimeStamp_gt?: Maybe<Int>;
  TimeStamp_gte?: Maybe<Int>;
  AND?: Maybe<CallsWhereInput[] | CallsWhereInput>;
  OR?: Maybe<CallsWhereInput[] | CallsWhereInput>;
  NOT?: Maybe<CallsWhereInput[] | CallsWhereInput>;
}

export interface PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutAuthorDataInput;
}

export interface PostUpdateManyWithoutAuthorInput {
  create?: Maybe<PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput>;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutAuthorInput[]
    | PostUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutAuthorInput[]
    | PostUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithoutFollowersDataInput {
  name?: Maybe<String>;
  age?: Maybe<Int>;
  email?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  follows?: Maybe<UserUpdateManyWithoutFollowersInput>;
}

export interface UserUpdateWithWhereUniqueWithoutFollowersInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFollowersDataInput;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ConfigSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ConfigWhereInput>;
  AND?: Maybe<ConfigSubscriptionWhereInput[] | ConfigSubscriptionWhereInput>;
  OR?: Maybe<ConfigSubscriptionWhereInput[] | ConfigSubscriptionWhereInput>;
  NOT?: Maybe<ConfigSubscriptionWhereInput[] | ConfigSubscriptionWhereInput>;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  age?: Maybe<Int>;
  age_not?: Maybe<Int>;
  age_in?: Maybe<Int[] | Int>;
  age_not_in?: Maybe<Int[] | Int>;
  age_lt?: Maybe<Int>;
  age_lte?: Maybe<Int>;
  age_gt?: Maybe<Int>;
  age_gte?: Maybe<Int>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithoutFollowsInput {
  create?: Maybe<
    UserCreateWithoutFollowsInput[] | UserCreateWithoutFollowsInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutFollowsInput[]
    | UserUpdateWithWhereUniqueWithoutFollowsInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutFollowsInput[]
    | UserUpsertWithWhereUniqueWithoutFollowsInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  age?: Maybe<Int>;
  age_not?: Maybe<Int>;
  age_in?: Maybe<Int[] | Int>;
  age_not_in?: Maybe<Int[] | Int>;
  age_lt?: Maybe<Int>;
  age_lte?: Maybe<Int>;
  age_gt?: Maybe<Int>;
  age_gte?: Maybe<Int>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  posts_every?: Maybe<PostWhereInput>;
  posts_some?: Maybe<PostWhereInput>;
  posts_none?: Maybe<PostWhereInput>;
  follows_every?: Maybe<UserWhereInput>;
  follows_some?: Maybe<UserWhereInput>;
  follows_none?: Maybe<UserWhereInput>;
  followers_every?: Maybe<UserWhereInput>;
  followers_some?: Maybe<UserWhereInput>;
  followers_none?: Maybe<UserWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  age?: Int;
  email: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  age: () => Promise<Int>;
  email: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  age: () => Promise<AsyncIterator<Int>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface ConfigEdge {
  node: Config;
  cursor: String;
}

export interface ConfigEdgePromise extends Promise<ConfigEdge>, Fragmentable {
  node: <T = ConfigPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ConfigEdgeSubscription
  extends Promise<AsyncIterator<ConfigEdge>>,
    Fragmentable {
  node: <T = ConfigSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CallsConnection {
  pageInfo: PageInfo;
  edges: CallsEdge[];
}

export interface CallsConnectionPromise
  extends Promise<CallsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CallsEdge>>() => T;
  aggregate: <T = AggregateCallsPromise>() => T;
}

export interface CallsConnectionSubscription
  extends Promise<AsyncIterator<CallsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CallsEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCallsSubscription>() => T;
}

export interface ConfigConnection {
  pageInfo: PageInfo;
  edges: ConfigEdge[];
}

export interface ConfigConnectionPromise
  extends Promise<ConfigConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ConfigEdge>>() => T;
  aggregate: <T = AggregateConfigPromise>() => T;
}

export interface ConfigConnectionSubscription
  extends Promise<AsyncIterator<ConfigConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ConfigEdgeSubscription>>>() => T;
  aggregate: <T = AggregateConfigSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface Config {
  id: ID_Output;
  IP: String;
  AllowedCallPerMinute: Int;
}

export interface ConfigPromise extends Promise<Config>, Fragmentable {
  id: () => Promise<ID_Output>;
  IP: () => Promise<String>;
  AllowedCallPerMinute: () => Promise<Int>;
}

export interface ConfigSubscription
  extends Promise<AsyncIterator<Config>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  IP: () => Promise<AsyncIterator<String>>;
  AllowedCallPerMinute: () => Promise<AsyncIterator<Int>>;
}

export interface ConfigNullablePromise
  extends Promise<Config | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  IP: () => Promise<String>;
  AllowedCallPerMinute: () => Promise<Int>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Calls {
  id: ID_Output;
  IP: String;
  Endpoint: String;
  TimeStamp: Int;
}

export interface CallsPromise extends Promise<Calls>, Fragmentable {
  id: () => Promise<ID_Output>;
  IP: () => Promise<String>;
  Endpoint: () => Promise<String>;
  TimeStamp: () => Promise<Int>;
}

export interface CallsSubscription
  extends Promise<AsyncIterator<Calls>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  IP: () => Promise<AsyncIterator<String>>;
  Endpoint: () => Promise<AsyncIterator<String>>;
  TimeStamp: () => Promise<AsyncIterator<Int>>;
}

export interface CallsNullablePromise
  extends Promise<Calls | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  IP: () => Promise<String>;
  Endpoint: () => Promise<String>;
  TimeStamp: () => Promise<Int>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface CallsSubscriptionPayload {
  mutation: MutationType;
  node: Calls;
  updatedFields: String[];
  previousValues: CallsPreviousValues;
}

export interface CallsSubscriptionPayloadPromise
  extends Promise<CallsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CallsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CallsPreviousValuesPromise>() => T;
}

export interface CallsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CallsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CallsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CallsPreviousValuesSubscription>() => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface CallsPreviousValues {
  id: ID_Output;
  IP: String;
  Endpoint: String;
  TimeStamp: Int;
}

export interface CallsPreviousValuesPromise
  extends Promise<CallsPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  IP: () => Promise<String>;
  Endpoint: () => Promise<String>;
  TimeStamp: () => Promise<Int>;
}

export interface CallsPreviousValuesSubscription
  extends Promise<AsyncIterator<CallsPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  IP: () => Promise<AsyncIterator<String>>;
  Endpoint: () => Promise<AsyncIterator<String>>;
  TimeStamp: () => Promise<AsyncIterator<Int>>;
}

export interface PostPreviousValues {
  id: ID_Output;
  title: String;
  published: Boolean;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  published: () => Promise<Boolean>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<Boolean>>;
}

export interface Post {
  id: ID_Output;
  title: String;
  published: Boolean;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  published: () => Promise<Boolean>;
  author: <T = UserPromise>() => T;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  author: <T = UserSubscription>() => T;
}

export interface PostNullablePromise
  extends Promise<Post | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  published: () => Promise<Boolean>;
  author: <T = UserPromise>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface CallsEdge {
  node: Calls;
  cursor: String;
}

export interface CallsEdgePromise extends Promise<CallsEdge>, Fragmentable {
  node: <T = CallsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CallsEdgeSubscription
  extends Promise<AsyncIterator<CallsEdge>>,
    Fragmentable {
  node: <T = CallsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ConfigPreviousValues {
  id: ID_Output;
  IP: String;
  AllowedCallPerMinute: Int;
}

export interface ConfigPreviousValuesPromise
  extends Promise<ConfigPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  IP: () => Promise<String>;
  AllowedCallPerMinute: () => Promise<Int>;
}

export interface ConfigPreviousValuesSubscription
  extends Promise<AsyncIterator<ConfigPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  IP: () => Promise<AsyncIterator<String>>;
  AllowedCallPerMinute: () => Promise<AsyncIterator<Int>>;
}

export interface ConfigSubscriptionPayload {
  mutation: MutationType;
  node: Config;
  updatedFields: String[];
  previousValues: ConfigPreviousValues;
}

export interface ConfigSubscriptionPayloadPromise
  extends Promise<ConfigSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ConfigPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ConfigPreviousValuesPromise>() => T;
}

export interface ConfigSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ConfigSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ConfigSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ConfigPreviousValuesSubscription>() => T;
}

export interface AggregateCalls {
  count: Int;
}

export interface AggregateCallsPromise
  extends Promise<AggregateCalls>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCallsSubscription
  extends Promise<AsyncIterator<AggregateCalls>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateConfig {
  count: Int;
}

export interface AggregateConfigPromise
  extends Promise<AggregateConfig>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateConfigSubscription
  extends Promise<AsyncIterator<AggregateConfig>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  name: String;
  age?: Int;
  email: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  age: () => Promise<Int>;
  email: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  follows: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  age: () => Promise<AsyncIterator<Int>>;
  email: () => Promise<AsyncIterator<String>>;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  follows: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followers: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  age: () => Promise<Int>;
  email: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  follows: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  followers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Config",
    embedded: false
  },
  {
    name: "Calls",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
